#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zombie_EnemyInRange

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Zombie_EnemyInRange.Zombie_EnemyInRange_C.ExecuteUbergraph_Zombie_EnemyInRange
// 0x0078 (0x0078 - 0x0000)
struct Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USD_AIComponent_C*                      CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange) == 0x000008, "Wrong alignment on Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange");
static_assert(sizeof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange) == 0x000078, "Wrong size on Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, EntryPoint) == 0x000000, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::EntryPoint' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, K2Node_Event_OwnerController) == 0x000008, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, K2Node_Event_ControlledPawn) == 0x000010, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000020, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000050, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, CallFunc_VSize_ReturnValue) == 0x000068, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000070, "Member 'Zombie_EnemyInRange_C_ExecuteUbergraph_Zombie_EnemyInRange::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function Zombie_EnemyInRange.Zombie_EnemyInRange_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct Zombie_EnemyInRange_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Zombie_EnemyInRange_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on Zombie_EnemyInRange_C_ReceiveActivationAI");
static_assert(sizeof(Zombie_EnemyInRange_C_ReceiveActivationAI) == 0x000010, "Wrong size on Zombie_EnemyInRange_C_ReceiveActivationAI");
static_assert(offsetof(Zombie_EnemyInRange_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'Zombie_EnemyInRange_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(Zombie_EnemyInRange_C_ReceiveActivationAI, ControlledPawn) == 0x000008, "Member 'Zombie_EnemyInRange_C_ReceiveActivationAI::ControlledPawn' has a wrong offset!");

}

